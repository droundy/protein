#!/usr/bin/python
from __future__ import division
import numpy as np
import sys
import os
import subprocess
import time

#working WIP

#notes:
#./batch sim plot shapes="p randst triangle" plots="time" specific="[4.00, 2.00, 0.00, 0.00, 15.00]" simflags="-hires"
#specific needed? can make handle running sim if data not present for python?
#reset command for doing everything in the jobs list from scatch?
#include command for only doing things marked in include?
#confirmation dialog
#store PID in outfile

#commands
def parseArgs(args):
    stringList = []
    for arg in args:
        if "=" not in arg:
            stringList += [arg]
    return stringList

#options
def parseKwargs(kwargs):
    stringDict = {}
    for kwarg in kwargs:
        if "=" in kwarg:
            (key,value) = kwarg.split("=")
            stringDict[key]=value
    return stringDict

#returns jobs matching options
def getJobs(options):
    with open("jobs") as jobFile:
        jobList = jobFile.readlines()
    try:
        shapes = options['shapes'].split()
        parsedJobs = [line.split() for line in jobList if (line!="\n" and line.split()[0] in shapes)]
    except KeyError:
        parsedJobs = [line.split() for line in jobList if line!="\n"]
    return parsedJobs

#starts simulations matching commands and options
def runSim(commands,options):
    if "srun" in commands:
        sruncmd = ["srun"]
    else:
        sruncmd = []
    runningSims = set()
    jobList = getJobs(options)
    for job in jobList:
        runningSims.add(subprocess.Popen(sruncmd + ["./protein_microscopy"] + [arg for arg in job]))
    while len(runningSims) > 0:
        for sim in runningSims.copy():
            if sim.poll() is not None:
                runningSims.remove(sim)
                #do file writing here
        time.sleep(30)
    return 0

#starts plots matching commands and options
def runPlots(commands,options):
    if "srun" in commands:
        sruncmd = ["srun"]
    else:
        sruncmd = []
    jobList = getJobs(options)
    runningPlots = set()
    try:
        for plot in options['plots'].split():
            for job in jobList:
                runningPlots.add(subProcess.Popen(sruncmd + ["python","pyplots/%s.py"%(plot)] + [arg for arg in job]))
    except KeyError:
        for job in jobList:
            runningPlots.add(subprocess.Popen(sruncmd + ["python","pyplots/box_plot.py"] + [arg for arg in job]))
            runningPlots.add(subprocess.Popen(sruncmd + ["python","pyplots/time_map.py"] + [arg for arg in job]))
            runningPlots.add(subprocess.Popen(sruncmd + ["python","pyplots/arrow_plot.py"] + [arg for arg in job]))
    while len(runningPlots) > 0:
        for plot in runningPlots.copy():
            if plot.poll() is not None:
                runningPlots.remove(plot)
                #do file writing here
            else:
                time.sleep(30)
    return 0

def runMovie(commands,options):
    if "srun" in commands:
        sruncmd = ["srun"]
    else:
        sruncmd = []
    jobList = getJobs(options)
    runningMovies = set()
    for job in jobList:
        if "-dump" in job:
            print sruncmd + ["python","pyplots/density_movie.py"] + [arg for arg in job if arg is not "-dump"]
            #runningMovies.add(subProcess.Popen(sruncmd + ["python","pyplots/density_movie.py"] + [arg for arg in job if arg is not "-dump"]))
    while len(runningMovies) > 0:
        for plot in runningMovies.copy():
            if plot.poll() is not None:
                runningMovies.remove(plot)
                #do file writing here
            else:
                time.sleep(30)
    return 0


def main():
    commands = parseArgs(sys.argv)
    options = parseKwargs(sys.argv)
    if "sim" in commands:
        runSim(commands,options)
    if "plot" in commands:
        runPlots(commands,options)
    if "movie" in commands:
        runMovies(commands,options)
    return 0

if __name__ == "__main__":
    main()
