#!/usr/bin/python
from __future__ import division
import numpy as np
import sys
import os
import subprocess
import time

#working WIP

#notes:
#./batch sim plot shapes="p randst triangle" plots="time" specific="[4.00, 2.00, 0.00, 0.00, 15.00]" simflags="-hires"
#specific needed? can make handle running sim if data not present for python?
#reset command for doing everything in the jobs list from scatch?
#include command for only doing things marked in include?
#confirmation dialog
#store PID in outfile

#commands
def parseArgs(args):
    stringList = []
    for arg in args:
        if "=" not in arg:
            stringList += [arg]
    return stringList

#options
def parseKwargs(kwargs):
    stringDict = {}
    for kwarg in kwargs:
        if "=" in kwarg:
            (key,value) = kwarg.split("=")
            stringDict[key]=value
    return stringDict

#returns jobs matching options
def getJobs(options):
    with open("jobs") as jobFile:
        jobList = jobFile.readlines()
    try:
        shapes = options['shapes'].split()
        parsedJobs = [line.split() for line in jobList if (line!="\n" and line.split()[0] in shapes)]
    except KeyError:
        parsedJobs = [line.split() for line in jobList if line!="\n"]
    return parsedJobs

#starts simulations matching commands and options
def runSim(commands,options):
    if "srun" in commands:
        sruncmd = ["srun"]
    else:
        sruncmd = []
    jobList = getJobs(options)
    for job in jobList:
        subprocess.Popen(sruncmd + ["./protein_microscopy"] + [arg for arg in job])
    return 0

#starts plots matching commands and options
def runPlots(commands,options):
    if "srun" in commands:
        sruncmd = ["srun"]
    else:
        sruncmd = []
    jobList = getJobs(options)
    try:
        for plot in options['plots'].split():
            for job in jobList:
                print sruncmd + ["pyplots/%s.py"%(plot)] + [arg for arg in job]
    except KeyError:
        for job in jobList:
            subprocess.Popen(sruncmd + ["pyplots/box_plot.py"] + [arg for arg in job])
            subprocess.Popen(sruncmd + ["pyplots/time_map.py"] + [arg for arg in job])
    return 0

def main():
    commands = parseArgs(sys.argv)
    options = parseKwargs(sys.argv)
    if "sim" in commands:
        runSim(commands,options)
        #while simulation set is not empty os.sleep or something
    if "plot" in commands:
        runPlots(commands,options)
    return 0

if __name__ == "__main__":
    main()
